@MISC{BradyYoutube2023,  
    author    = "Edwin Brady",  
    title     = "Idris 2: Quantitative Types in Action",  
    howpublished = "YouTube",  
    year      = 2023,  
    url       = "https://www.youtube.com/watch?v=0uA-tKR6Ah4"  
}  

@article{brady2013idris,
  title={Idris, a general-purpose dependently typed programming language: Design and implementation},
  author={Brady, Edwin},
  journal={Journal of functional programming},
  volume={23},
  number={5},
  pages={552--593},
  year={2013},
  publisher={Cambridge University Press}
}

@article{brady2021idris,
  title={Idris 2: Quantitative type theory in practice},
  author={Brady, Edwin},
  journal={arXiv preprint arXiv:2104.00480},
  year={2021}
}
@inproceedings{atkey2018syntax,
  title={Syntax and semantics of quantitative type theory},
  author={Atkey, Robert},
  booktitle={Proceedings of the 33rd Annual ACM/IEEE Symposium on Logic in Computer Science},
  pages={56--65},
  year={2018}
}
@article{hindley1969principal,
  title={The principal type-scheme of an object in combinatory logic},
  author={Hindley, Roger},
  journal={Transactions of the american mathematical society},
  volume={146},
  pages={29--60},
  year={1969},
  publisher={JSTOR}
}
@article{milner1978theory,
  title={A theory of type polymorphism in programming},
  author={Milner, Robin},
  journal={Journal of computer and system sciences},
  volume={17},
  number={3},
  pages={348--375},
  year={1978},
  publisher={Elsevier}
}
@book{martin1984intuitionistic,
  title={Intuitionistic type theory},
  author={Martin-L{\"o}f, Per and Sambin, Giovanni},
  volume={9},
  year={1984},
  publisher={Bibliopolis Naples}
}

@misc{repo-key,  
  author = {Giuseppe Lomurno},  
  title  = {Idris2-nvim},  
  url    = {https://github.com/idris-community/idris2-nvim},  
  note   = {GitHub repository}  
}  

@article{conal2021elliott,
author = {Elliott, Conal},
title = {Symbolic and automatic differentiation of languages},
year = {2021},
issue_date = {August 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {ICFP},
url = {https://doi.org/10.1145/3473583},
doi = {10.1145/3473583},
abstract = {Formal languages are usually defined in terms of set theory. Choosing type theory instead gives us languages as type-level predicates over strings. Applying a language to a string yields a type whose elements are language membership proofs describing how a string parses in the language. The usual building blocks of languages (including union, concatenation, and Kleene closure) have precise and compelling specifications uncomplicated by operational strategies and are easily generalized to a few general domain-transforming and codomain-transforming operations on predicates. A simple characterization of languages (and indeed functions from lists to any type) captures the essential idea behind language “differentiation” as used for recognizing languages, leading to a collection of lemmas about type-level predicates. These lemmas are the heart of two dual parsing implementations—using (inductive) regular expressions and (coinductive) tries—each containing the same code but in dual arrangements (with representation and primitive operations trading places). The regular expression version corresponds to symbolic differentiation, while the trie version corresponds to automatic differentiation. The relatively easy-to-prove properties of type-level languages transfer almost effortlessly to the decidable implementations. In particular, despite the inductive and coinductive nature of regular expressions and tries respectively, we need neither inductive nor coinductive/bisimulation arguments to prove algebraic properties.},
journal = {Proc. ACM Program. Lang.},
month = aug,
articleno = {78},
numpages = {18},
keywords = {language derivatives, program calculation, tries}
}

@misc{idris-seminar,  
  author = {Mehrdad Shahidi, Zahra Khodabakhshian},  
  title  = {code base for the seminar},  
  url    = {https://github.com/cyberkatze/idris-seminar},  
  note   = {GitHub repository}  
}  